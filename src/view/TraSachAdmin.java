/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import controller.MuonTraDAO;
import controller.PrintPDF;
import static controller.PrintPDF.getCell;
import static controller.PrintPDF.getPara;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import model.AllDetails;

/**
 *
 * @author Admin
 */
public class TraSachAdmin extends javax.swing.JFrame implements ActionListener {

    public static String strHanTra;
    public static String strMaMT;
    public static String strMaTL;
    public static String strNotes;
//    private Date ngayTra = new Date();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    /**
     * Creates new form TraSachAdmin
     */
    public TraSachAdmin() {
        initComponents();
        this.setTitle("Trả Tài Liệu");
        this.setLocationRelativeTo(null);
        btnCancel.addActionListener(this);
        btnConfirm.addActionListener(this);
        btnSearch.addActionListener(this);
        btnShowAll.addActionListener(this);
        btnPrint.addActionListener(this);
//        btnGiaHan.addActionListener(this);

        clickShowAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCTMT = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtMaMT = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMaTL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnShowAll = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnPrint = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCTMT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblCTMT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCTMTMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCTMT);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Trả Tài Liệu");

        jLabel2.setText("Mã Mượn Trả");

        jLabel3.setText("Mã Tài Liệu");

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setText(">");

        btnShowAll.setText("Show All");

        btnConfirm.setText("Xác Nhận");

        btnCancel.setText("Cancel");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnPrint.setText("Print");
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnPrint);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 996, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaTL, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaMT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnShowAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirm)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(335, 335, 335))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMaTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtMaMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowAll)
                    .addComponent(btnConfirm)
                    .addComponent(btnCancel))
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCTMTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCTMTMouseClicked
        // TODO add your handling code here:
        int r = tblCTMT.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblCTMT.getModel();
        strMaMT = model.getValueAt(r, 1).toString();
        strMaTL = model.getValueAt(r, 2).toString();
        strHanTra = model.getValueAt(r, 7).toString();

        int cf = JOptionPane.showConfirmDialog(rootPane, "Chọn Mã Mượn Trả: '" + strMaMT + "'\nVà Mã Tài Liệu: '" + strMaTL + "' ?", "Confirm Selected", JOptionPane.YES_NO_OPTION);
        if (cf == JOptionPane.YES_OPTION) {
            //do nothing
        } else if (cf == JOptionPane.NO_OPTION) {
//            strMaMT = null;
            strMaTL = null;
        }
    }//GEN-LAST:event_tblCTMTMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TraSachAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TraSachAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TraSachAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TraSachAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Set the jTattoo look and feel */
        try {
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");

        } catch (Exception e) {
            System.err.println("Look and feel not set.");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TraSachAdmin().setVisible(true);
            }
        });
    }

    public void printResult() {
        MessageFormat header = new MessageFormat("Trả Tài Liệu");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            tblCTMT.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException e) {
            e.printStackTrace();
        }
    }

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 150) {
                width = 150;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    public void showResult() {
        int i = 1;
        ArrayList<AllDetails> listSer = new MuonTraDAO().searchCTMTbyAll(strMaMT, strMaTL);
        DefaultTableModel modelTbl = new DefaultTableModel();

        modelTbl.setColumnIdentifiers(new Object[]{
            "STT", "MaMT", "MaTL", "TenTL", "UserID", "UserName", "AdminName", "NgayMuon", "HanTra", "NgayTra", "TienPhat", "GhiChu"
        });
        for (AllDetails dt : listSer) {
            modelTbl.addRow(new Object[]{
                i++, dt.getMaMT(), dt.getMaTL(), dt.getDocName(), dt.getUserID(), dt.getUserName(), dt.getAdminName(), dt.getNgayMuon(), dt.getHanTra(), dt.getNgayTra(), dt.getMoney(), dt.getNote()
            });
        }
        tblCTMT.setModel(modelTbl);//set model for table with new data
//        tblCTMT.AUTO_RESIZE_ALL_COLUMNS;
        resizeColumnWidth(tblCTMT);
    }

    public void clickSearch() {
        int i = 1;
        ArrayList<AllDetails> listSer = null;
        if (!("").equals(txtMaMT.getText()) && !("").equals(txtMaTL.getText())) {
            listSer = new MuonTraDAO().searchCTMTbyAll(txtMaMT.getText(), txtMaTL.getText());
        } else if (("").equals(txtMaTL.getText())) {
            listSer = new MuonTraDAO().searchCTMTBymaMT(txtMaMT.getText());
        } else if (("").equals(txtMaMT.getText())) {
            listSer = new MuonTraDAO().searchCTMTbymaTL(txtMaTL.getText());
        }
        DefaultTableModel modelTbl = new DefaultTableModel();

        modelTbl.setColumnIdentifiers(new Object[]{
            "STT", "MaMT", "MaTL", "TenTL", "UserID", "UserName", "AdminName", "NgayMuon", "HanTra", "NgayTra", "TienPhat", "GhiChu"
        });
        for (AllDetails dt : listSer) {
            modelTbl.addRow(new Object[]{
                i++, dt.getMaMT(), dt.getMaTL(), dt.getDocName(), dt.getUserID(), dt.getUserName(), dt.getAdminName(), dt.getNgayMuon(), dt.getHanTra(), dt.getNgayTra(), dt.getMoney(), dt.getNote()
            });
        }
        tblCTMT.setModel(modelTbl);//set model for table with new data
        resizeColumnWidth(tblCTMT);
    }

    public void clickConfirm() {
        long tmp = 0;
        int money = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date ngayTra = new Date();
        try {
            Date hanTra = sdf.parse(strHanTra);
            tmp = (ngayTra.getTime() - hanTra.getTime()) / (24 * 60 * 60 * 1000);
            if (tmp <= 0) {
                money = 0;
            } else {
                money = (int) (tmp * 500);
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
        if (tmp > 0) {
            strNotes = "Quá Hạn " + tmp + " ngày";
        } else {
            strNotes = "Đúng Hạn!";
        }
        try {
            Connection con = MuonTraDAO.getConnection();
//            System.out.println("Connect Success!");
            System.out.println(strMaMT + " " + strMaTL);
            String query = "UPDATE tblChiTietMT SET NgayTra = ?, TienPhat = ?, GhiChu = ? WHERE MaMT = '" + strMaMT + "' and MaTL = '" + strMaTL + "'";

            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, sdf.format(ngayTra));
            ps.setString(2, String.valueOf(money));
            ps.setString(3, strNotes);

            ps.executeUpdate();
            updateQuantityTra(strMaTL);
            updateState(strMaTL);
            showResult();
            JOptionPane.showMessageDialog(rootPane, "Successfully!");

        } catch (SQLException e) {
//            System.out.println("Error COnnection!");
            e.printStackTrace();
        }
    }

    public void clickShowAll() {
        int i = 1;
        ArrayList<AllDetails> listDetail = new MuonTraDAO().getChiTietMTByUserID(CheckUser.userID);
        DefaultTableModel modelTbl = new DefaultTableModel();

        modelTbl.setColumnIdentifiers(new Object[]{
            "STT", "MaMT", "MaTL", "TenTL", "UserName", "AdminName", "NgayMuon", "HanTra", "NgayTra", "TienPhat", "GhiChu"
        });
        for (AllDetails dt : listDetail) {
            modelTbl.addRow(new Object[]{
                i++, dt.getMaMT(), dt.getMaTL(), dt.getDocName(), dt.getUserName(), dt.getAdminName(), dt.getNgayMuon(), dt.getHanTra(), dt.getNgayTra(), dt.getMoney(), dt.getNote()
            });
        }
        tblCTMT.setModel(modelTbl);//set model for table with new data
        resizeColumnWidth(tblCTMT);
    }

    public int getQuantity(String maTL) {
        int q = 0;
        try {
            Connection con = MuonTraDAO.getConnection();

            String query = "SELECT SoLuong FROM tblTaiLieu WHERE MaTL = '" + maTL + "'";

            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                q = rs.getInt(1);
            }

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
        return q;
    }

    public void updateQuantityTra(String maTL) {
        try {
            String quantity = null;

            Connection con = MuonTraDAO.getConnection();

            quantity = String.valueOf(getQuantity(maTL) + 1);

            String query = "UPDATE tblTaiLieu SET SoLuong = ? WHERE MaTL = '" + maTL + "'";

            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, quantity);
            pst.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
    }

    public void updateState(String maTL) {
        try {
            String s = null;
            Connection con = MuonTraDAO.getConnection();

            String query = "UPDATE tblTaiLieu SET TrangThai = ? WHERE MaTL = '" + maTL + "'";

            PreparedStatement pst = con.prepareStatement(query);
            if (getQuantity(maTL) == 0) {
                pst.setString(1, "Hết");
            } else if (getQuantity(maTL) > 0) {
                pst.setString(1, "Còn");
            }
            pst.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
    }

    public void getReport() {
        int i = 1;
        Font fontArial = PrintPDF.createFont("C:\\Windows\\Fonts\\Arial.ttf", 12);
        Date ngayTraTL = new Date();
        String strNgayTra = sdf.format(ngayTraTL);
        String query = "SELECT tblChiTietMT.MaMT, TenSach, TienPhat, GhiChu  FROM tblChiTietMT, tblDKMuonTra, tblTaiLieu\n"
                + "WHERE tblChiTietMT.MaTL = tblTaiLieu.MaTL "
                + "and tblChiTietMT.MaMT = tblDKMuonTra.MaMT "
                + "and NgayTra = '" + strNgayTra + "' and UserID = '" + CheckUser.userID + "';";

        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("C:\\Users\\Admin\\Documents\\NetBeansProjects\\BaoCaoPRJ\\BaoCaoPRJ\\QuanLyThuVien\\PrintReports\\TraTL"
                    + "\\TraTL_" + strNgayTra + "_" + CheckUser.userName
                    + "_" + CheckUser.userID + ".pdf"));
            document.open();

            document.add(getPara("Thông Tin Trả Tài Liệu"));
            document.add(getPara("Hà Nội, " + new Date().toString()));
            document.add(getPara("\n-----------------------------------------------------------------------------------------\n"));
            document.add(new Paragraph("\n \n"));
            document.add(getPara("Mã Người Trả: " + CheckUser.userID));
            document.add(getPara("Tên Người Trả: " + CheckUser.userName));
            document.add(getPara("Admin Xác Nhận Trả: " + DKMuonTraView.getNameAdmin(AdminLoginFrame.idLogin)));
            document.add(new Paragraph("\n \n"));

            PdfPTable table = new PdfPTable(new float[]{9, 15, 40, 15, 25});
            PdfPCell cell = new PdfPCell(new Paragraph("Danh Sách Tài Liệu Trả", fontArial));
            cell.setColspan(5);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//            cell.setBackgroundColor(BaseColor.DARK_GRAY);
            table.addCell(cell);

            table.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            table.addCell(getCell("Mã MT", PdfPCell.ALIGN_CENTER));
            table.addCell(getCell("Tên Sách", PdfPCell.ALIGN_CENTER));
            table.addCell(getCell("Tiền Phạt", PdfPCell.ALIGN_CENTER));
            table.addCell(getCell("Ghi Chú", PdfPCell.ALIGN_CENTER));
            Connection con = MuonTraDAO.getConnection();
            try {
                PreparedStatement ps = con.prepareStatement(query);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    table.addCell(Integer.toString(i));
                    table.addCell(new Phrase(rs.getString(1), fontArial));
                    table.addCell(new Phrase(rs.getString(2), fontArial));
                    table.addCell(Integer.toString(rs.getInt(3)));
                    table.addCell(new Phrase(rs.getString(4), fontArial));
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            document.add(table);
            document.add(new Paragraph("\n\n"));
            document.add(getPara("\n----------------------------------------o0o----------------------------------------\n"));

            JOptionPane.showMessageDialog(rootPane, "Report Saved");

            document.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tblCTMT;
    private javax.swing.JTextField txtMaMT;
    private javax.swing.JTextField txtMaTL;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCancel) {
            new AdminView().setVisible(true);
            this.dispose();
        } else if (e.getSource() == btnSearch) {
            clickSearch();
        } else if (e.getSource() == btnConfirm) {
            if (strMaMT != null && strMaTL != null) {
                clickConfirm();
                if (MuonTraDAO.getNumOfMuonTL(strMaMT) == MuonTraDAO.getNumOfTraTL(strMaMT)) {
                    JOptionPane.showMessageDialog(rootPane, "Đã trả hết mã '" + strMaMT + "' !\nThanh toán tiền cọc!\nSố tiền cọc là: " 
                            + MuonTraDAO.getNumOfMuonTL(strMaMT) * 50000 + "đ");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Chưa chọn Tài Liệu Muốn Trả", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } else if (e.getSource() == btnShowAll) {
            clickShowAll();
        } else if (e.getSource() == btnPrint) {
            getReport();
//            printResult();
//            new PrintTraTL().setVisible(true);
//            this.dispose();
        }
    }
}
