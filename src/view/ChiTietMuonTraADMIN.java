/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import controller.MuonTraDAO;
import static controller.MuonTraDAO.getConnection;
import controller.PrintPDF;
import static controller.PrintPDF.getCell;
import static controller.PrintPDF.getGlueParagraph;
import static controller.PrintPDF.getPara;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import model.AllDetails;
import model.ChiTietMuonTra;
import static view.DKMuonTraView.maMT;

/**
 *
 * @author Admin
 */
public class ChiTietMuonTraADMIN extends javax.swing.JFrame implements ActionListener {

    int numOfDoc = 1;
    int soSachDinhMuon = Integer.valueOf(DKMuonTraView.strTienCoc) / 50000;

    /**
     * Creates new form ChiTietMuonTraADMIN
     */
    public ChiTietMuonTraADMIN() {
        initComponents();
        this.setTitle("Chi Tiết Mượn Trả Admin");
        this.setLocationRelativeTo(null);
//        btnReset.addActionListener(this);
        btnConfirm.addActionListener(this);
        btnMuon.addActionListener(this);
        btnshowtable.addActionListener(this);
        btnChooseMaTL.addActionListener(this);
        btnUpdate.addActionListener(this);
        lbTittle.setText("Điền đầy đủ thông tin ở ô bên dưới.");
        lbDocName.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtMaTL = new javax.swing.JTextField();
        txtHanTra = new javax.swing.JTextField();
        lbTittle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnMuon = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        btnshowtable = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnPrint = new javax.swing.JButton();
        btnChooseMaTL = new javax.swing.JButton();
        lbDocName = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chi Tiết Mượn");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setText("Mã Tài Liệu");

        jLabel3.setText("Hạn Trả");

        txtMaTL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMaTLKeyPressed(evt);
            }
        });

        lbTittle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTittle.setText("Điền đầy đủ thông tin ở ô bên dưới. Chú ý mỗi sinh viên chỉ được mượn tối đa 3 tài liệu trên 1 lần mượn");

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        btnMuon.setText("Mượn");

        btnConfirm.setText("Hoàn Thành");

        btnshowtable.setText("Show All");
        btnshowtable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowtableActionPerformed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnPrint.setText("Print");
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPrint);

        btnChooseMaTL.setText("...");

        lbDocName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDocName.setText("Tên Tài Liệu");

        btnUpdate.setText("Sửa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirm)
                        .addGap(18, 18, 18)
                        .addComponent(btnshowtable, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDocName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtMaTL, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChooseMaTL, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                                    .addComponent(txtHanTra))))
                        .addGap(276, 276, 276))))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbTittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbTittle)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnChooseMaTL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDocName)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHanTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnMuon)
                    .addComponent(btnshowtable)
                    .addComponent(btnUpdate))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnshowtableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowtableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnshowtableActionPerformed

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 150) {
                width = 150;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
//        new PrintChiTietMT().setVisible(true);
//        this.dispose();
        getReport();
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtMaTLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaTLKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            lbDocName.setText("=>Tài Liệu: " + getNameDoc());
        }
    }//GEN-LAST:event_txtMaTLKeyPressed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        // TODO add your handling code here:
        int r = tbl.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();

        txtHanTra.setText(model.getValueAt(r, 7).toString());
        txtMaTL.setText(model.getValueAt(r, 2).toString());
    }//GEN-LAST:event_tblMouseClicked
    public String getNameDoc() {
        String usrName = null;
        try {
            Connection con = getConnection();
            System.out.println("connect Success!");

            String query = "SELECT * FROM tblTaiLieu WHERE MaTL = ?";
            PreparedStatement ps = con.prepareStatement(query);

            ps.setString(1, txtMaTL.getText());

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                usrName = rs.getString(2);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return usrName;
    }

    public void PrintTBL() {
        MessageFormat header = new MessageFormat("Phiếu Chi Tiết Mượn Trả\n"
                + "\n Hà Nội, " + DKMuonTraView.strNgayMuon + "\n");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            tbl.print(JTable.PrintMode.FIT_WIDTH, header, footer);

        } catch (java.awt.print.PrinterException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChiTietMuonTraADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChiTietMuonTraADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChiTietMuonTraADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChiTietMuonTraADMIN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Set the jTattoo look and feel */
        try {
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");

        } catch (Exception e) {
            System.err.println("Look and feel not set.");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChiTietMuonTraADMIN().setVisible(true);
            }
        });
    }

    public int getQuantity(String maTL) {
        int q = 0;
        try {

            Connection con = getConnection();

            String query = "SELECT SoLuong FROM tblTaiLieu WHERE MaTL = '" + maTL + "'";

            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                q = rs.getInt(1);
            }

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
        return q;
    }

    public void updateQuantity(String maTL) {
        try {
            String quantity = null;
            Connection con = getConnection();

            quantity = String.valueOf(getQuantity(maTL) - 1);

            String query = "UPDATE tblTaiLieu SET SoLuong = ? WHERE MaTL = '" + maTL + "'";

            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, quantity);
            pst.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
    }

    public void updateState(String maTL) {
        try {
            String s = null;
            Connection con = getConnection();
            String query = "UPDATE tblTaiLieu SET TrangThai = ? WHERE MaTL = '" + maTL + "'";

            PreparedStatement pst = con.prepareStatement(query);
            if (getQuantity(maTL) == 0) {
                pst.setString(1, "Hết");
            } else if (getQuantity(maTL) > 0) {
                pst.setString(1, "Còn");
            }
            pst.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error COnnection!");
        }
    }

    public void showTable() {
        int i = 1;
        ArrayList<AllDetails> listCT = new MuonTraDAO().getlistCTMTByMaMT(maMT);
        DefaultTableModel modelTbl = new DefaultTableModel();

        modelTbl.setColumnIdentifiers(new Object[]{
            "STT", "MaMT", "MaTL", "TenSach", "UserName", "AdminName", "NgayMuon", "HanTra"
        });
        for (AllDetails ct : listCT) {
            modelTbl.addRow(new Object[]{
                i++, ct.getMaMT(), ct.getMaTL(), ct.getDocName(), ct.getUserName(), ct.getAdminName(), ct.getNgayMuon(), ct.getHanTra()
            });
        }
        tbl.setModel(modelTbl);//set model cho t2
        resizeColumnWidth(tbl);
    }

    public void clickShowTbl() {
        int i = 1;
        ArrayList<ChiTietMuonTra> listCT = new MuonTraDAO().getlistCTMT();
        DefaultTableModel modelTbl = new DefaultTableModel();

        modelTbl.setColumnIdentifiers(new Object[]{
            "STT", "MaMT", "MaTL", "HanTra", "NgayTra", "TienPhat", "GhiChu"
        });
        for (ChiTietMuonTra ct : listCT) {
            modelTbl.addRow(new Object[]{
                i++, ct.getMaMT(), ct.getMaTL(), ct.getHanTra(), ct.getNgayTra(), ct.getTienPhat(), ct.getGhiChu()
            });
        }
        tbl.setModel(modelTbl);//set model for t2 with new data
        resizeColumnWidth(tbl);
    }

    public void clickReset() {
        txtHanTra.setText("");
        txtMaTL.setText("");
    }

    public void clickMuonBtn() {
        ArrayList<ChiTietMuonTra> listCT = new ArrayList<>();
        ChiTietMuonTra ctmt = new ChiTietMuonTra();

        ctmt.setMaMT(maMT);
        ctmt.setMaTL(txtMaTL.getText());

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            ctmt.setHanTra(sdf.parse(txtHanTra.getText()));
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
        if (getQuantity(txtMaTL.getText()) > 0) {
            if (new MuonTraDAO().addChiTietMTadmin(ctmt)) {
                JOptionPane.showMessageDialog(rootPane, "Successful!");
                updateQuantity(txtMaTL.getText());
                updateState(txtMaTL.getText());
                listCT.add(ctmt);
                showTable();
                numOfDoc++;
            } else {
                JOptionPane.showMessageDialog(rootPane, "ERROR! Tài Liệu Đã Mượn! \nHoặc Chưa Điền Đủ Thông Tin.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Không Thành Công!\nTài liệu Không còn hoặc chưa điền đủ thông tin!");
        }

    }

    public void clickUpdate() {
        int r = tbl.getSelectedRow();
        String maMT = tbl.getModel().getValueAt(r, 1).toString();
        String maTL = tbl.getModel().getValueAt(r, 2).toString();

        new MuonTraDAO().updateCTMT(txtHanTra.getText(), maMT, maTL);
        JOptionPane.showMessageDialog(rootPane, "Successful!");
        showTable();
    }

    public void getReport() {
        int i = 1;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Font fontArial = PrintPDF.createFont("C:\\Windows\\Fonts\\Arial.ttf", 12);
        Date ngayMuon = new Date();
        String strNgayMuon = sdf.format(ngayMuon);
        String query = "SELECT TenSach, tblChiTietMT.HanTra FROM tblChiTietMT, tblTaiLieu\n"
                + "WHERE tblChiTietMT.MaTL = tblTaiLieu.MaTL and tblChiTietMT.MaMT = '" + maMT + "';";

        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream("C:\\Users\\Admin\\Documents\\NetBeansProjects\\BaoCaoPRJ\\BaoCaoPRJ\\QuanLyThuVien\\PrintReports\\DkiMuon"
                    + "\\DKi_" + strNgayMuon + "_" + DKMuonTraView.userName
                    + "_" + DKMuonTraView.userID + ".pdf"));
            document.open();

            document.add(getPara("Phiếu Đăng Ký Mượn Trả Tài Liệu"));
            document.add(getPara("Hà Nội, " + new Date().toString()));
            document.add(getPara("\n-----------------------------------------------------------------------------------------\n"));
            document.add(new Paragraph("\n \n"));

            document.add(getGlueParagraph("Mã Mượn Trả: " + maMT, "Tiền Cọc: " + DKMuonTraView.strTienCoc + "đ"));
            document.add(getGlueParagraph("User Name: " + DKMuonTraView.userName, "User ID: " + DKMuonTraView.userID));
            document.add(getGlueParagraph("Admin Name: " + DKMuonTraView.adminName, "Admin ID: " + DKMuonTraView.adminID));

            document.add(new Paragraph("\n \n"));

            PdfPTable t1 = new PdfPTable(new float[]{10, 70, 20});
            PdfPCell cell = new PdfPCell(new Paragraph("Danh Sách Đăng Ký Mượn", fontArial));
            cell.setColspan(5);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//            cell.setBackgroundColor(BaseColor.DARK_GRAY);
            t1.addCell(cell);

            t1.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t1.addCell(getCell("Tên Sách", PdfPCell.ALIGN_CENTER));
            t1.addCell(getCell("Hạn Trả", PdfPCell.ALIGN_CENTER));
            Connection con = MuonTraDAO.getConnection();
            try {
                PreparedStatement ps = con.prepareStatement(query);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t1.addCell(Integer.toString(i));
                    t1.addCell(new Phrase(rs.getString(1), fontArial));
                    t1.addCell(new Phrase(sdf.format(rs.getDate(2)), fontArial));
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            document.add(t1);
            document.add(new Paragraph("\n\n"));
            document.add(getPara("\n----------------------------------------o0o----------------------------------------\n"));

            JOptionPane.showMessageDialog(rootPane, "Report Saved");

            document.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseMaTL;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnMuon;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnshowtable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    public static javax.swing.JLabel lbDocName;
    public static javax.swing.JLabel lbTittle;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtHanTra;
    public static javax.swing.JTextField txtMaTL;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnConfirm) {
            new AdminView().setVisible(true);
            this.dispose();
        } else if (e.getSource() == btnMuon) {
            System.out.println(soSachDinhMuon);
            if (numOfDoc <= soSachDinhMuon) {
                clickMuonBtn();
            } else {
                int confirm = JOptionPane.showConfirmDialog(rootPane, "Lỗi!\nSố lượng đăng kí mượn là: " + soSachDinhMuon
                        + ".\nBạn muốn mượn thêm?", "ERROR!", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    int cf = JOptionPane.showConfirmDialog(rootPane, "Bạn muốn in biên lai không?", "Confirm Report", JOptionPane.YES_NO_OPTION);
                    if(cf == JOptionPane.YES_OPTION){
                        getReport();
                    }
                    new DKMuonTraView().setVisible(true);
                    this.dispose();
                } else {
                    //do nothing
                }
            }
        } else if (e.getSource() == btnshowtable) {
            clickShowTbl();
        } else if (e.getSource() == btnChooseMaTL) {
            new ChooseMaTL().setVisible(true);
        } else if (e.getSource() == btnUpdate) {
            clickUpdate();
        }

    }
}
