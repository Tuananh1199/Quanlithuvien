/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import controller.DocumentDAO;
import controller.PrintPDF;
import static controller.PrintPDF.getCell;
import static controller.PrintPDF.getPara;
import controller.UserDAO;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import model.AllDetails;
import model.Document;
import static view.AdminLoginFrame.idLogin;

/**
 *
 * @author Admin
 */
public class ThongKeTaiLieu extends javax.swing.JFrame implements ActionListener {

    public String adName = DKMuonTraView.getNameAdmin(idLogin);

    /**
     * Creates new form ThongKeTaiLieu
     */
    public ThongKeTaiLieu() {
        initComponents();
        this.setTitle("Thống Kê Tài Liệu");
        this.setLocationRelativeTo(null);
        btnCancel.addActionListener(this);
        btnOK.addActionListener(this);
        btnPrint.addActionListener(this);
        btnOKUsr.addActionListener(this);
        btnPrintUser.addActionListener(this);
        
        thongKeTongSL();
        thongkeForUS();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        tabThongKe = new javax.swing.JTabbedPane();
        pnThongke = new javax.swing.JPanel();
        boxDoc = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblThongKe = new javax.swing.JTable();
        btnOK = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        btnPrint = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnOKUsr = new javax.swing.JButton();
        cbUser = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTKeUser = new javax.swing.JTable();
        jToolBar2 = new javax.swing.JToolBar();
        btnPrintUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCancel.setText("Cancel");

        boxDoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tổng Số Tài Liệu", "TacGia", "NXB", "TheLoai", "NXB - TheLoai", "TacGia - NXB", "TacGia - TheLoai" }));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Thống Kê Tài Liệu");

        tblThongKe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblThongKe);

        btnOK.setText("OK");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnPrint.setText("Print");
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnPrint);

        javax.swing.GroupLayout pnThongkeLayout = new javax.swing.GroupLayout(pnThongke);
        pnThongke.setLayout(pnThongkeLayout);
        pnThongkeLayout.setHorizontalGroup(
            pnThongkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pnThongkeLayout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(boxDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnThongkeLayout.setVerticalGroup(
            pnThongkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThongkeLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addGroup(pnThongkeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOK))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabThongKe.addTab("Tài Liệu", pnThongke);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Thống Kê Độc Giả");

        btnOKUsr.setText("OK");

        cbUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Số Tài Liệu Đã Mượn", "Số Tài Liệu Chưa Trả" }));

        tblTKeUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblTKeUser);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        btnPrintUser.setText("Print");
        btnPrintUser.setFocusable(false);
        btnPrintUser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrintUser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnPrintUser);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(cbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnOKUsr, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(171, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOKUsr))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tabThongKe.addTab("Độc giả", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabThongKe)
            .addGroup(layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 120) {
                width = 120;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    public void btnOkClick() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        ArrayList<Document> docList = null;
        ResultSet rs = null;
        String boxValue = (String) boxDoc.getSelectedItem();

        if (boxValue.equals("TheLoai")) {
            int i = 1;
            docList = new DocumentDAO().thongKeTheLoai();
            model.setColumnIdentifiers(new Object[]{
                "STT", "TheLoai", "SoLuong",});

            for (Document doc : docList) {
                model.addRow(new Object[]{
                    i++, doc.getType(), doc.getSoLuong()
                });
            }
            tblThongKe.setModel(model);
        } else if (boxValue.equals("TacGia")) {
            int i = 1;
            docList = new DocumentDAO().thongKeTacGia();
            model.setColumnIdentifiers(new Object[]{
                "STT", "TacGia", "SoLuong",});

            for (Document doc : docList) {
                model.addRow(new Object[]{
                    i++, doc.getTacGia(), doc.getSoLuong()
                });
            }
            tblThongKe.setModel(model);
        } else if (boxValue.equals("NXB")) {
            int i = 1;
            docList = new DocumentDAO().thongKeNXB();
            model.setColumnIdentifiers(new Object[]{
                "STT", "NXB", "SoLuong"});

            for (Document doc : docList) {
                model.addRow(new Object[]{
                    i++, doc.getNxb(), doc.getSoLuong()
                });
            }
            tblThongKe.setModel(model);
        } else if (boxValue.equals("TrangThai")) {
            int i = 1;
            docList = new DocumentDAO().thongKeTrangThai();
            model.setColumnIdentifiers(new Object[]{
                "STT", "Trạng Thái", "SoLuong"});

            for (Document doc : docList) {
                model.addRow(new Object[]{
                    i++, doc.getTrangThai(), doc.getSoLuong()
                });
            }
            tblThongKe.setModel(model);
        } else if (boxValue.equals("Tổng Số Tài Liệu")) {
//            thongKeTongSL();
//            int i = 1;
            docList = new DocumentDAO().thongKeTongSoTL();
            model.setColumnIdentifiers(new Object[]{
                "Tổng Số Tài Liệu Trong Thư Viện"});

            for (Document doc : docList) {
                model.addRow(new Object[]{
                    doc.getSoLuong()
                });
            }
            tblThongKe.setModel(model);
        } else if (boxValue.equalsIgnoreCase("NXB - TheLoai")) {
            int i = 1;
            rs = DocumentDAO.getRStForNxbTheLoai();
            model.setColumnIdentifiers(new Object[]{
                "STT", "NXB", "Toán", "Vật Lý", "Hóa Học", "Tin Học", "Tiếng Anh", "Triết Học", "Truyện"
            });
            try {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        i++, rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getInt(5), rs.getInt(6), rs.getInt(7), rs.getInt(8)
                    });
                }
                rs.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            tblThongKe.setModel(model);
            resizeColumnWidth(tblThongKe);
        } else if (boxValue.equalsIgnoreCase("TacGia - TheLoai")) {
            System.out.println(boxValue);
            int i = 1;
            rs = DocumentDAO.getRStForTacGiaTheLoai();
            model.setColumnIdentifiers(new Object[]{
                "STT", "TacGia", "Toán", "Vật Lý", "Hóa Học", "Tin Học", "Tiếng Anh", "Triết Học", "Truyện"
            });

            try {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        i++, rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getInt(5), rs.getInt(6), rs.getInt(7), rs.getInt(8)
                    });
                }
                rs.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            tblThongKe.setModel(model);
            resizeColumnWidth(tblThongKe);
        } else if (boxValue.equalsIgnoreCase("TacGia - NXB")) {
            System.out.println(boxValue);
            int i = 1;
            rs = DocumentDAO.getRStForTacGiaNxb();
            model.setColumnIdentifiers(new Object[]{
                "STT", "TacGia", "DHBKHN", "DHQG", "Kim Đồng", "NXB.Dân Gian", "NXB.Giáo Dục"
            });
            try {
                while (rs.next()) {
                    model.addRow(new Object[]{
                        i++, rs.getString(1), rs.getInt(2), rs.getInt(3), rs.getInt(4), rs.getInt(5), rs.getInt(6)
                    });
                }
                rs.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            tblThongKe.setModel(model);
            resizeColumnWidth(tblThongKe);
        }

    }

    public void btnOkUserClick() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        ArrayList<AllDetails> List = null;

        String boxUSValue = (String) cbUser.getSelectedItem();

        if (boxUSValue.equalsIgnoreCase("Số Tài Liệu Đã Mượn")) {
            int i = 1;
            List = new UserDAO().getSLTaiLieuDaMuon();
            model.setColumnIdentifiers(new Object[]{
                "STT", "Mã Độc Giả", "Tên Độc Giả", "Số Lượng",});

            for (AllDetails dt : List) {
                model.addRow(new Object[]{
                    i++, dt.getUserID(), dt.getUserName(), dt.getSoLuong()
                });
            }
            tblTKeUser.setModel(model);
        } else if (boxUSValue.equalsIgnoreCase("Số Tài Liệu Chưa Trả")) {
            int i = 1;
            List = new UserDAO().getSLTaiLieuChuaTra();
            model.setColumnIdentifiers(new Object[]{
                "STT", "Mã Độc Giả", "Tên Độc Giả", "Số Lượng",});

            for (AllDetails dt : List) {
                model.addRow(new Object[]{
                    i++, dt.getUserID(), dt.getUserName(), dt.getSoLuong()
                });
            }
            tblTKeUser.setModel(model);
        }
    }


    public void thongKeTongSL() {
        DefaultTableModel modelDoc = new DefaultTableModel();
        ArrayList<Document> docList = new DocumentDAO().thongKeTongSoTL();
        modelDoc.setColumnIdentifiers(new Object[]{
            "Tổng Số Tài Liệu Trong Thư Viện"});

        for (Document doc : docList) {
            modelDoc.addRow(new Object[]{
                doc.getSoLuong()
            });
        }
        tblThongKe.setModel(modelDoc);
    }

    public void thongkeForUS() {
        int i = 1;
        DefaultTableModel model = new DefaultTableModel();
        ArrayList<AllDetails> List = new UserDAO().getSLTaiLieuDaMuon();
        model.setColumnIdentifiers(new Object[]{
            "STT", "Mã Độc Giả", "Tên Độc Giả", "Số Lượng",});

        for (AllDetails dt : List) {
            model.addRow(new Object[]{
                i++, dt.getUserID(), dt.getUserName(), dt.getSoLuong()
            });
        }
        tblTKeUser.setModel(model);
    }

    public void getReportUser(){
        int i = 1, j = 1;
        Font fontArial = PrintPDF.createFont("C:\\Windows\\Fonts\\Arial.ttf", 12);

        Date today = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String strToday = sdf.format(today);

        Connection con = UserDAO.getConnection();
        String query1 = "SELECT tbluser.UserID, tbluser.Name, count(MaTL) FROM  tbluser left join \n"
                + "(tblChiTietMT left join tblDKMuonTra on tblChiTietMT.MaMT = tblDKMuonTra.MaMT)\n"
                + "on tbluser.UserID = tblDKMuonTra.UserID\n"
                + "group by tbluser.UserID, tbluser.Name;";
        String query2 = "SELECT tbluser.UserID, tbluser.Name, count(MaTL) as sl FROM  tbluser left join \n"
                + "(tblChiTietMT left join tblDKMuonTra on tblChiTietMT.MaMT = tblDKMuonTra.MaMT)\n"
                + "on tbluser.UserID = tblDKMuonTra.UserID\n"
                + "and NgayTra is null\n"
                + "group by tbluser.UserID, tbluser.Name\n"
                + "order by sl desc;";
        try {
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            PdfWriter.getInstance(doc, new FileOutputStream("C:\\Users\\Admin\\Documents\\NetBeansProjects\\BaoCaoPRJ\\BaoCaoPRJ\\QuanLyThuVien\\PrintReports\\ThongKe"
                    + "\\TKe_User_" + strToday + "_" + adName + ".pdf"));
            doc.open();

            doc.add(getPara("Hệ Thống Quản Lý Thư Viện"));
            doc.add(getPara("Hà Nội, " + new Date().toString()));
            doc.add(getPara("\n-----------------------------------------------------------------------------------------\n"));
            doc.add(new Paragraph("\n \n"));
            doc.add(getPara("BẢN THỐNG KÊ ĐỘC GIẢ \n\n"));

            doc.add(new Paragraph("-Thống Kê Theo Số Tài Liệu Đã Mượn:\n\n", fontArial));
            PdfPTable t1 = new PdfPTable(new float[]{10, 25, 40, 25});
            t1.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t1.addCell(getCell("Mã Độc Giả", PdfPCell.ALIGN_CENTER));
            t1.addCell(getCell("Tên Độc Giả", PdfPCell.ALIGN_CENTER));
            t1.addCell(getCell("Đã Mượn", PdfPCell.ALIGN_CENTER));
            try {
                PreparedStatement ps = con.prepareStatement(query1);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t1.addCell(Integer.toString(i));
                    t1.addCell(Integer.toString(rs.getInt(1)));
                    t1.addCell(new Phrase(rs.getString(2), fontArial));
                    t1.addCell(Integer.toString(rs.getInt(3)));
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(t1);
            doc.add(new Paragraph("\n"));

            doc.add(new Paragraph("-Thống Kê Theo Số Tài Liệu Chưa Trả:\n\n", fontArial));
            PdfPTable t2 = new PdfPTable(new float[]{10, 25, 40, 25});
            t2.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t2.addCell(getCell("Mã Độc Giả", PdfPCell.ALIGN_CENTER));
            t2.addCell(getCell("Tên Độc Giả", PdfPCell.ALIGN_CENTER));
            t2.addCell(getCell("Chưa Trả", PdfPCell.ALIGN_CENTER));
            try {
                PreparedStatement ps = con.prepareStatement(query2);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t2.addCell(Integer.toString(j));
                    t2.addCell(Integer.toString(rs.getInt(1)));
                    t2.addCell(new Phrase(rs.getString(2), fontArial));
                    t2.addCell(Integer.toString(rs.getInt(3)));
                    j++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(t2);
            doc.add(new Paragraph("\n"));

            doc.add(new Paragraph("\n\n"));
            doc.add(getPara("\n----------------------------------------o0o----------------------------------------\n"));
            doc.add(getPara("Reported By " + adName));

            JOptionPane.showMessageDialog(rootPane, "Report Saved");
            doc.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    } 

    public void getReportDoc(){
        int i = 1, j = 1, k = 1, c1 = 1, c2 = 1, c3 = 1;
        Font fontArial = PrintPDF.createFont("C:\\Windows\\Fonts\\Arial.ttf", 12);

        Date today = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String strToday = sdf.format(today);

        Connection con = DocumentDAO.getConnection();

        String sql1 = "SELECT SUM(SoLuong) FROM tblTaiLieu";
        String sql2 = "SELECT TheLoai, SUM(SoLuong) FROM tblTaiLieu GROUP BY TheLoai";
        String sql3 = "SELECT TacGia, SUM(SoLuong) FROM tblTaiLieu GROUP BY TacGia";
        String sql4 = "SELECT NXB, SUM(SoLuong) FROM tblTaiLieu GROUP BY NXB";

        try {
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            PdfWriter.getInstance(doc, new FileOutputStream("C:\\Users\\Admin\\Documents\\NetBeansProjects\\BaoCaoPRJ\\BaoCaoPRJ\\QuanLyThuVien\\PrintReports\\ThongKe"
                    + "\\TKe_Doc_" + strToday + "_" + adName + ".pdf"));
            doc.open();

            doc.add(getPara("Hệ Thống Quản Lý Thư Viện"));
            doc.add(getPara("Hà Nội, " + new Date().toString()));
            doc.add(getPara("\n-----------------------------------------------------------------------------------------\n"));
            doc.add(new Paragraph("\n \n"));
            doc.add(getPara("BẢN THỐNG KÊ TÀI LIỆU \n\n"));

            try {
                PreparedStatement ps = con.prepareStatement(sql1);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    doc.add(new Paragraph("-Tổng Số Tài Liệu Trong Thư Viện: "
                            + Integer.toString(rs.getInt(1)), fontArial));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(new Paragraph("\n"));

            doc.add(new Paragraph("-Thống Kê Theo Thể Loại:\n\n", fontArial));
            PdfPTable t2 = new PdfPTable(new float[]{10, 60, 30});
            t2.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t2.addCell(getCell("Thể Loại", PdfPCell.ALIGN_CENTER));
            t2.addCell(getCell("Số Lượng", PdfPCell.ALIGN_CENTER));
            try {
                PreparedStatement ps = con.prepareStatement(sql2);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t2.addCell(Integer.toString(i));
                    t2.addCell(new Phrase(rs.getString(1), fontArial));
                    t2.addCell(Integer.toString(rs.getInt(2)));
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(t2);

            doc.add(new Paragraph("-Thống Kê Theo Tác Giả:\n\n", fontArial));
            PdfPTable t3 = new PdfPTable(new float[]{10, 60, 30});
            t3.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t3.addCell(getCell("Tác Giả", PdfPCell.ALIGN_CENTER));
            t3.addCell(getCell("Số Lượng", PdfPCell.ALIGN_CENTER));
            try {
                PreparedStatement ps = con.prepareStatement(sql3);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t3.addCell(Integer.toString(j));
                    t3.addCell(new Phrase(rs.getString(1), fontArial));
                    t3.addCell(Integer.toString(rs.getInt(2)));
                    j++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(t3);

            doc.add(new Paragraph("-Thống Kê Theo Nhà Xuất Bản:\n\n", fontArial));
            PdfPTable t4 = new PdfPTable(new float[]{10, 60, 30});
            t4.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            t4.addCell(getCell("Nhà Xuất Bản", PdfPCell.ALIGN_CENTER));
            t4.addCell(getCell("Số Lượng", PdfPCell.ALIGN_CENTER));
            try {
                PreparedStatement ps = con.prepareStatement(sql4);
                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    t4.addCell(Integer.toString(k));
                    t4.addCell(new Phrase(rs.getString(1), fontArial));
                    t4.addCell(Integer.toString(rs.getInt(2)));
                    k++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(t4);
            
            doc.add(new Paragraph("-Thống Kê Theo Tác Giả - Nhà Xuất Bản:\n\n", fontArial));
            PdfPTable tblCross1 = new PdfPTable(new float[]{1f,3f,1f,1f,1f,1f,1f});
            tblCross1.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("Tác Giả", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("DHBKHN", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("DHQG", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("Kim Đồng", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("NXB.Dân Gian", PdfPCell.ALIGN_CENTER));
            tblCross1.addCell(getCell("NXB.Giáo Dục", PdfPCell.ALIGN_CENTER));
            try {
                ResultSet rs = DocumentDAO.getRStForTacGiaNxb();

                while (rs.next()) {
                    tblCross1.addCell(Integer.toString(c1));
                    tblCross1.addCell(new Phrase(rs.getString(1), fontArial));
                    tblCross1.addCell(Integer.toString(rs.getInt(2)));
                    tblCross1.addCell(Integer.toString(rs.getInt(3)));
                    tblCross1.addCell(Integer.toString(rs.getInt(4)));
                    tblCross1.addCell(Integer.toString(rs.getInt(5)));
                    tblCross1.addCell(Integer.toString(rs.getInt(6)));
                    c1++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(tblCross1);

            doc.add(new Paragraph("-Thống Kê Theo Nhà Xuất Bản - Thể Loại:\n\n", fontArial));
            PdfPTable tblCross2 = new PdfPTable(new float[]{1f,3f,1f,1f,1f,1f,1f,1f,1f});
            tblCross2.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("NXB", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Toán", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Vật Lý", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Hóa Học", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Tin Học", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Tiếng Anh", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Triết Học", PdfPCell.ALIGN_CENTER));
            tblCross2.addCell(getCell("Truyện", PdfPCell.ALIGN_CENTER));
            try {
                ResultSet rs = DocumentDAO.getRStForNxbTheLoai();

                while (rs.next()) {
                    tblCross2.addCell(Integer.toString(c2));
                    tblCross2.addCell(new Phrase(rs.getString(1), fontArial));
                    tblCross2.addCell(Integer.toString(rs.getInt(2)));
                    tblCross2.addCell(Integer.toString(rs.getInt(3)));
                    tblCross2.addCell(Integer.toString(rs.getInt(4)));
                    tblCross2.addCell(Integer.toString(rs.getInt(5)));
                    tblCross2.addCell(Integer.toString(rs.getInt(6)));
                    tblCross2.addCell(Integer.toString(rs.getInt(7)));
                    tblCross2.addCell(Integer.toString(rs.getInt(8)));
                    c2++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(tblCross2);
            
            doc.add(new Paragraph("-Thống Kê Theo Tác Giả - Thể Loại:\n\n", fontArial));
            PdfPTable tblCross3 = new PdfPTable(new float[]{1f,3f,1f,1f,1f,1f,1f,1f,1f});
            tblCross3.addCell(getCell("STT", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Tác Giả", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Toán", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Vật Lý", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Hóa Học", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Tin Học", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Tiếng Anh", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Triết Học", PdfPCell.ALIGN_CENTER));
            tblCross3.addCell(getCell("Truyện", PdfPCell.ALIGN_CENTER));
            
            
            try {
                ResultSet rs = DocumentDAO.getRStForTacGiaTheLoai();

                while (rs.next()) {
                    tblCross3.addCell(Integer.toString(c3));
                    tblCross3.addCell(new Phrase(rs.getString(1), fontArial));
                    tblCross3.addCell(Integer.toString(rs.getInt(2)));
                    tblCross3.addCell(Integer.toString(rs.getInt(3)));
                    tblCross3.addCell(Integer.toString(rs.getInt(4)));
                    tblCross3.addCell(Integer.toString(rs.getInt(5)));
                    tblCross3.addCell(Integer.toString(rs.getInt(6)));
                    tblCross3.addCell(Integer.toString(rs.getInt(7)));
                    tblCross3.addCell(Integer.toString(rs.getInt(8)));
                    c3++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            doc.add(tblCross3);
            
            doc.add(new Paragraph("\n\n"));
            doc.add(getPara("\n----------------------------------------o0o----------------------------------------\n"));
            doc.add(getPara("Reported By " + adName));

            JOptionPane.showMessageDialog(rootPane, "Report Saved");

            doc.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    } 
            
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeTaiLieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeTaiLieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeTaiLieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeTaiLieu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Set the jTattoo look and feel */
        try {
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");

        } catch (Exception e) {
            System.err.println("Look and feel not set.");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongKeTaiLieu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxDoc;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnOKUsr;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnPrintUser;
    private javax.swing.JComboBox<String> cbUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    public static javax.swing.JPanel pnThongke;
    public static javax.swing.JTabbedPane tabThongKe;
    private javax.swing.JTable tblTKeUser;
    private javax.swing.JTable tblThongKe;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnCancel) {
            new AdminView().setVisible(true);
            this.dispose();
        } else if (e.getSource() == btnOK) {
            btnOkClick();
        } else if (e.getSource() == btnPrint) {
//            System.out.println("click print");
            getReportDoc();
        } else if (e.getSource() == btnOKUsr) {
            btnOkUserClick();
        } else if (e.getSource() == btnPrintUser) {
            getReportUser();
        }
    }

}
